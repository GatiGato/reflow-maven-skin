##
## Copyright 2012-2017 Andrius Velykis
##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
#**
 * Convenience directive to invoke a method and ignore the return value.
 *
 * Usage:
 *    #call ( $hashtable.put("foo", "bar") )
 *#
#macro ( call $foo )#*
  *##if ($foo)#*
    ## do nothing - the 'if' is for ignoring the return value#*
  *##end#*
*##end#*
 *
 * Checks if the given link is an external one.
*##macro ( checkExtLink $href )#*
  *##set ( $checkExtLink = false )#*
  *##if ( $href && ($href.toLowerCase().startsWith("http:/") || $href.toLowerCase().startsWith("https:/")
        || $href.toLowerCase().startsWith("ftp:/") || $href.toLowerCase().startsWith("mailto:")
        || $href.toLowerCase().startsWith("file:/") || ($href.toLowerCase().indexOf("://") != -1) ))#*
  *##set ( $checkExtLink = true )#*
  *##end#*
*##end#*
 *
 * Relativizes the link
 *
*##macro ( relativeLink $href )#*
    *##if ( $href )#*
        *##set ( $relativeLink = $PathTool.calculateLink( $href, $relativePath ) )#*
        *##set ( $relativeLink = $relativeLink.replaceAll( "\\", "/" ) )#*
        *##if ( ( $relativeLink == '' ) )#*
            *##set ( $relativeLink = './' )#*
        *##end#*
            ## Attempt to normalise the relative link - this is useful for active link
            ## calculations and better relative links for subdirectories.
            ##
            ## The issue is particularly visible with pages in subdirectories,
            ## so that if you are in <root>/dev/index.html, the relative menu link to
            ## the _same_ page would likely be ../dev/index.html instead of '' or 'index.html'.
        *##set ( $absoluteLink = $uriTool.toURI( "$currentFileLoc" ).resolve( "$relativeLink" ).normalize().toString() )#*
        *##if ( $currentFileLoc == $absoluteLink )##
                #* for matching link, use empty relative link#*
            *##set ( $relativeLink = '' )#*
        *##else#*
                ## relativize the absolute link based on current directory
                ## (uses Maven project link relativization)
            *##set ( $currentFileDir = $PathTool.getDirectoryComponent( $currentFileLoc ) )#*
            *##set ( $relativeLink = $uriTool.relativizeLink( $currentFileDir, $absoluteLink ) )#*
        *##end#*

    *##else##
        #* null $href
        *##set ( $relativeLink = false )#*
    *##end#*
*##end#*
 *
 * Checks if the given link is an external one. If not, calculates a relative link.
 *
 *##macro ( relativeExtLink $href )#*
  *##checkExtLink ( $href )#*
  *##if ( $checkExtLink )##
        #* if external, keep the original#*
      *##set ( $relativeExtLink = $href )#*
  *##else##
        #* if not external link, calculate an return the relative link#*
      *##relativeLink ( $href )#*
      *##set ( $relativeExtLink = $relativeLink )#*
  *##end#*
*##end#*
 *
 * Makes the link relative to the project URL, if one is set.
 *
 *##macro ( currentFileRelativeLink $href )#*

  *##if ( $project.url && $project.url != '' && $currentFileName )##
        ## if project URL is available, relativize the link using it as a base dir
        #* note that the current file can be nested under project URL, so take that into account
        *##set ( $currentFileDir = $uriTool.toURI( "$project.url/" ).resolve( "$currentFileName" ).resolve(".").toString() )#*
      *##set ( $currentFileRelativeLink = $uriTool.relativizeLink( $currentFileDir, $href ) )#*
  *##else##
        #* otherwise just keep the original link#*
      *##set ( $currentFileRelativeLink = $href )#*
  *##end#*
*##end#*
 *
 * Checks if the given link is the currently active one
 *
 *##macro ( activeLink $href )#*
  *##relativeLink ( $href )#*
    *##if ( $href )#*
        either empty link (pointing to a page), or if the current file is index.html,
        the link may point to the whole directory
        *##if ( '' == $relativeLink || ( $alignedFileName.endsWith("index.html") && './' == $relativeLink ) )#*
            *##set ( $activeLink = true )#*
            *##set ( $activeClass = 'active' )#*
        *##else#*
            *##set ( $activeLink = false )#*
            *##set ( $activeClass = '' )#*
        *##end#*
    *##else#*
        null href - disable the link
        *##set ( $activeLink = false )#*
        *##set ( $activeClass = 'disabled' )#*
    *##end#*
*##end#*
 *
 * Creates a class="name" attribute if the given name exists
 *
 *##macro ( classAttr $name )#*

  *##if ( $name && '' != $name )#*
      *# class="$name" #*
  *##end#*
*##end#*
 *
 * Creates dropdown menu items
 *
 *##macro ( topMenu $menus )#*

    *##foreach ( $menu in $menus )#*

      *##if ( $menu.name )#*
            ## check if one of the subtree items is the current one
            *##set ( $displayTree = false )#*
          *##displayTree ( $menu )##
            <li class="dropdown#if ( $displayTree ) active#end">
                <a href="#" class="dropdown-toggle" data-toggle="dropdown">$menu.name <b class="caret"></b></a>
                <ul class="dropdown-menu">
#*          *##foreach ( $item in $menu.items )#*
              *##activeLink ( $item.href )#*
              *##if ($item.items.isEmpty())##
                    <li #classAttr( $activeClass )>#link ( $relativeLink $item.name $item.target )</li>
#*              *##else##
                    <li class="dropdown-submenu $activeClass">
#*                  *##link ( $relativeLink $item.name $item.target )##
                    <ul class="dropdown-menu">
#*                  *##foreach ($subitem in $item.items)#*
                      *##activeLink ( $subitem.href )##
                        <li #classAttr( $activeClass )>#link ( $relativeLink $subitem.name $subitem.target )</li>
#*                  *##end##
                    </ul>
                </li>
#*              *##end#*
          *##end##
            </ul>
        </li>
#*      *##end#*
  *##end#*
*##end#*
 *
 * Outputs a list of links
 *
 *##macro ( links $links )#*

  *##foreach ( $item in $links )#*
      *##activeLink ( $item.href )#*
      *#<li #classAttr( $activeClass )>#link ( $relativeLink $item.name $item.target )</li>
#*  *##end#*
*##end#*

 *
 * Shortcut to display a basic hyperlink
 *
 *##macro ( link $href $name $target )#*
  *##fullLink ( $href $name $target false false false false false false false )#*
*##end#*

 *
 * Outputs a hyperlink with image and other attributes
 *
 *##macro ( fullLink $href $name $target $img $position $alt $border $width $height $icon)##
##
## The opening <a> tag
<a #*
    ## if $href=false, do not create link
    *##if ( $href ) href="$href" #end##
#*  *##if ( $name ) title="$name" #end##
#*  *##if ( $target ) target="$target" #end##
#*  *##checkExtLink ( $href )##
#*  *##if ( $checkExtLink ) class="externalLink" #end##
>#*
    *##if ( $img && $position == "left" )#*
        ## Image on the left side of the name
        *##image ($img $alt $border $width $height)$name#*
    *##elseif ( $img )#*
        ## Image on the right side of the name
        *#${name}#if ($img) #image ($img $alt $border $width $height)#end#*
    *##else#*
        ## No image - optional icon though on the right of the name
        *#${name}#if ($icon) <i class="$icon"></i>#end#*
    *##end##
##
</a>##
#end#*

 *
 * Outputs an image with attributes
 *
 *##macro ( image $img $alt $border $width $height )#*

    *##if ( $img )#*
        *#<img class="imageLink" #*
            *##relativeExtLink ( $img ) #*
            *# src="$relativeExtLink" alt='"' #*
            *##if ( $alt )$alt#end'"' #*
            *##if ( $border ) border="$border" #end#*
            *##if ( $width ) width="$width" #end#*
            *##if ( $height ) height="$height" #end#*
        *# />#*
    *##end##
#end##
##
#**
 * Outputs a list of breadcrumbs
 *
 *##macro ( breadcrumbs $breadcrumbs )#*
    *##foreach ( $item in $breadcrumbs )#*
        *##relativeLink ( $item.href )##
                <li>#fullLink ( $relativeLink $item.name $item.target $item.img $item.position $item.alt $item.border $item.width $item.height false )</li>
#*  *##end##
                <li>#if ( $shortTitle )$shortTitle#else$title#end</li>
#end##
##
#**
 * Outputs the top Table of Contents ( subnav )
 *
 *##macro ( topToc $topItems )#*
    ## read the top ToC max config to get the number of items to show
    *##if ( $config.tocTopMax )#*
        *##set ( $tocMax = $convert.toNumber($config.tocTopMax.getValue()) )#*
    *##else#*
        *##set ( $tocMax = -1 )#*
    *##end#*

    ## check if we flatten the first 2 levels of ToC:
    *##set ( $flattenConfig = $config.tocTopFlatten )#*
    *##if ( !$flattenConfig )#*
        flatten config not available - calculate if need flattening:
        only flatten if the top level has not more than 2 elements
        *##set ( $topItemsCount = $topItems.size() )#*
        *##set ( $flattenLevel2 = $topItemsCount <= 2 )#*
    *##elseif ( "true" == $flattenConfig.getValue() )#*
        *##set ( $flattenLevel2 = true )#*
    *##else#*
        *##set ( $flattenLevel2 = false )#*
    *##end#*
    ## count items at top and the next level that will be displayed in the ToC bar
    *##set ( $tocBarItems = [] )#*
    *##set ( $tocBarMaxItems = [] )#*

    *##set ( $tocCount = 0 )#*
    *##foreach ( $topItem in $topItems )#*

        *##if ( ($tocCount < $tocMax) || ($tocMax < 0) )#*
            ## only add items if not after the maximum
            *##call ( $tocBarItems.add( $topItem ) )#*
            *##set ( $topInMax = false )#*
        *##else#*
            *##call ( $tocBarMaxItems.add( $topItem ) )#*
            *##set ( $topInMax = true )#*
        *##end#*

        *##set ( $tocCount = $tocCount + 1 )#*

        ## if level 2 is flattened, traverse for subitems
        *##if ( $flattenLevel2 )#*

            *##foreach ( $item in $topItem.items )#*

                *##if ( ($tocCount < $tocMax) || ($tocMax < 0) )#*
                    ## only add subitems if not after the maximum
                    *##call ( $tocBarItems.add( $item ) )#*
                *##elseif ( !$topInMax )#*
                    ## top is not in the max - so add these directly to the max
                    *##call ( $tocBarMaxItems.add( $item ) )#*
                *##end#*
                *##set ( $tocCount = $tocCount + 1 )#*
            *##end#*
        *##end#*
    *##end#*

    ## count items at top and the next level that will be displayed in the ToC bar
    *##set ( $tocCount = 0 )#*
    *##set ( $tocDivider = false )#*

    *##foreach ( $topItem in $tocBarItems )#*
        *##if ( $topItems.contains( $topItem ) && $tocDivider )##
                        <li class="divider-vertical"></li>
#*      *##end#*
        *##if ( $topItem.items.isEmpty() )##
                        <li class="toplevel"><a href="#$topItem.id" title="$topItem.text">$topItem.text</a></li>
#*      *##elseif ( $topItems.contains( $topItem ) && $flattenLevel2 )##
            ## top level item, but flattened: put it as a link, because its children are also in top bar
                        <li class="toplevel"><a href="#$topItem.id" title="$topItem.text">$topItem.text</a></li>
#*      *##else##
                        <li class="dropdown">
                            <a href="#$topItem.id" title="$topItem.text" class="dropdown-toggle" role="button" data-toggle="dropdown" data-target="#">$topItem.text <b class="caret"></b></a>
                            <ul class="dropdown-menu" role="menu">
                                <!-- Repeat the item, otherwise it is not clickable as the dropdown root -->
                                <li><a href="#$topItem.id" title="$topItem.text">$topItem.text</a></li>
                                <li class="divider"></li>
                              #topTocDropdown ( $topItem.items )
                            </ul>
                        </li>
#*      *##end#*
        *##set ( $tocDivider = true )#*
    *##end#*

    *##if ( $tocBarMaxItems.size() > 0 )##
        ## put the max items into an extra dropdown
        <li class="divider-vertical"></li>
        <li class="dropdown">
            <a href="#" title="More&hellip;" class="dropdown-toggle" role="button" data-toggle="dropdown" data-target="#">&hellip; <b class="caret"></b></a>
            <ul class="dropdown-menu" role="menu">
#*              *##topTocDropdown ( $tocBarMaxItems )##
            </ul>
        </li>
#*  *##end##
#end##
##
#**
 * Recursively outputs the contents of top bar ToC dropdown item
 *
 *#
#macro ( topTocDropdown $items )#*

    *##foreach ( $subitem in $items )#*
        *##if ($subitem.items.isEmpty())##
                <li><a href="#$subitem.id" title="$subitem.text">$subitem.text</a></li>
#*      *##else##
                <li class="dropdown-submenu">
                    <a href="#$subitem.id" title="$subitem.text">$subitem.text</a>
                    <ul class="dropdown-menu" role="menu">
#*                      *##topTocDropdown ( $subitem.items )##
                    </ul>
                </li>
#*      *##end#*
    *##end#*

*##end##
##
#**
 * Outputs Table of Contents into a list menu
 *
 *##macro ( listToc $menus )##
##
                <ul class="nav nav-list">
                    <li class="nav-header">Table of Contents</li>
#*  *##foreach ( $item in $menus )#*
        *##listTocItem ( $item )#*
    *##end##
                </ul>
#end##
##
#**
 * Recursively outputs ToC item and its children
 *
 *##macro ( listTocItem $item )#*

    *##if ( $item.items.size() > 0 )##
        <li class="dropdown"><a href="#$item.id" title="$item.text">$item.text <b class="caret"></b></a>
#*      *##if ( $item.items.size() > 0 )##
            <ul class="nav nav-list">
#*          *##foreach ( $subitem in $item.items )
                #listTocItem ( $subitem )
#*          *##end#*

            *##if ( !$addedDivider )
                <li class="divider"></li>
#*              *##set ( $addedDivider = true )#*
            *##end##
            </ul>
#*      *##end#*
        *#</li>
#*  *##else##
        <li><a href="#$item.id" title="$item.text">$item.text</a>
#*      *##set ( $addedDivider = false )#*
    *##end##
#end##
##
#**
 * Outputs the top banner contents
 *
 *##macro ( banner $banner $id )#*
    *##if ( $banner )#*
        *##if ( $banner.href )#*
            *##relativeExtLink ( $banner.href )##
                    <a href="$relativeExtLink" id="$id"#if ( $banner.alt ) title="$banner.alt"#end>
#*      *##else##
                    <div id="$id">
#*      *##end#*

        *##if ( $banner.src )#*
            *##relativeExtLink ( $banner.src )##
            <img src="$relativeExtLink"
                 alt='"'#if ( $banner.alt )$banner.alt#elseif ( $banner.name )$banner.name#end'"'
#*              *##if ( $banner.border ) border="$banner.border"#end##
#*              *##if ( $banner.width ) width="$banner.width"#end##
#*              *##if ( $banner.height ) height="$banner.height"#end##
#*          *# />#*
        *##else##
            <h1>$banner.name</h1>
#*      *##end#*

        *##if ( $banner.href )##
            </a>
#*      *##else##
            </div>
#*      *##end#*

        ## add slogan to correct position
        *##if ( $config.slogan && $config.slogan != '' )#*
            ## read slogan position - if not set, use 'bannerLeft' as default
            *##if ( $config.slogan.getAttribute("position") )#*
                *##set ( $sloganPos = $config.slogan.getAttribute("position") )#*
            *##else#*
                *##set ( $sloganPos = "bannerLeft" )#*
            *##end#*

            *##if ( $id == $sloganPos )##
                    <p class="lead">$config.slogan.getValue()</p>
#*          *##end#*
        *##end#*
    *##end##
#end##
##
#**
 * Partitions the body contents into sections with possibly different representations.
 * Available body types, indicated in custom page config `sections` tag:
 *
 *  <sections>
 *      <body/> - the main body of the page
 *      <sidebar/> - sidebar (should go after the body)
 *      <thumbs>x</thumbs> - x-column grid layout for thumbnails (first image is used as thumbnail)
 *      <columns>x</columns> - x-column grid layout
 *      <carousel/> - carousel (spinning images with captions)
 *  </sections>
 *
 *##macro ( bodySections $bodyContent $sectionConfig )#*
    ## Split everything in the content on the horizontal rule tags <hr />
    *##set ( $sections = $htmlTool.split( $bodyContent, "hr" ) )#*
    *##set ( $sectCount = $sectionConfig.getChildCount() )#*

    ## Check if sidebar is indicated somewhere in the sections, need to adjust layout accordingly
    *##set ( $hasSidebar = $sectionConfig.getChild( 'sidebar' ) )#*

    ## flag to indicate that last section was a main body section (needs closing for non-body sections)
    *##set ( $lastBody = false )#*

    ## flag to indicate that a body section has already been found (to avoid multiple page-headers)
    *##set ( $bodyFound = false )#*

    *##set ( $sectIndex = 0 )#*
    *##foreach ($section in $sections)#*

        ## Determine section type from the configuration
        *##if ( $sectIndex < $sectCount )#*
            *##set ( $sectType = $sectionConfig.getChild($sectIndex).getName() )#*
            *##set ( $sectTypeValue = $sectionConfig.getChild($sectIndex).getValue() )#*
        *##else#*
            *##set ( $sectType = 'body' )#*
        *##end#*

        *##if ( 'sidebar' == $sectType || 'thumbs' == $sectType || 'columns' == $sectType || 'carousel' == $sectType )#*
            ## split section into sub-sections for each header (h1, h2, etc tag)
            *##set ( $subsections = $htmlTool.splitOnStarts( $section, "h1, h2, h3, h4, h5, h6") )#*
        *##else#*
            ## keep the section
            *##set ( $subsections = [ $section ] )#*
        *##end#*


        *##if ( 'thumbs' == $sectType || 'columns' == $sectType || 'carousel' == $sectType )#*
            ## for full width layouts, we first need to close the body if it is still open
            *##if ( $lastBody )##
            </div>
        </div>#*
                check if need to add explicit ToC sidebar
                (if ToC sidebar is needed, but no sidebar is defined)
                *##if ( $tocSidebar && !$hasSidebar)##
#*                  *##tocSidebar ()#*
                *##end##
    </div>
#*      *##end#*

            ## Print the subsections into columns
            *##if ( 'thumbs' == $sectType )#*
                *##thumbs ( $sectTypeValue $subsections )#*
            *##elseif ( 'columns' == $sectType )#*
                *##columns ( $sectTypeValue $subsections )#*
            *##else#*
                *##carousel ( $subsections )#*
            *##end#*

            ## mark that last one was not a body
            #set ( $lastBody = false )

        *##elseif ( 'sidebar' == $sectType )#*
            ## for sidebar, close the body if needed but not body row - then add the sidebar
            *##if ( $lastBody )##
            </div>
        </div>
#*      *##else##
    <hr />
    <div class="row">
#*      *##end
        <div class="col-md-4">
#*      *##if ( $tocSidebar )#*
            *##tocSidebarContent ()#*
        *##end##
            <div class="well sidebar">
              ## Print the subsections into sidebar
                #sidebar ( $subsections )
            </div>
        </div>
    </div>
#*      *##set ( $lastBody = false )#*

    *##else#*
        ## handle all other cases as 'body' type
        *##if ( !$lastBody )##
    <div class="row">
#*          *##if ( $hasSidebar || $tocSidebar )#*
        ## has a sidebar - take part width *#
      <div class="col-md-8">
#*          *##else#*
            ## no sidebar - take full width *#
      <div class="col-md-12">
#*          *##end##
            <div class="body-content">
#*      *##else#*
                ## reinstate the horizontal rule for continuing body *#
              <hr />
#*
        *##end#*
        ## set the contents
        *##foreach ( $subsection in $subsections )#*
            ## if first body section, output with page-header
            *##if ( !$bodyFound )#*
                *##bodyWithHeader ( $subsection )#*
            *##else#*
                *#$subsection#*
            *##end#*
            *##set ( $bodyFound = true )#*
        *##end#*
        *##set ( $lastBody = true )#*
    *##end#*
        ## increment the section counter (need to advance through the types)
        *##set ( $sectIndex = $sectIndex + 1 )#*
    *##end#*
    ## After the loop, check if body section still needs closing (if it was the last section)
    *##if ( $lastBody )##
            </div>
        </div>
 #*
        check if need to add explicit ToC sidebar
        (if ToC sidebar is needed, but no sidebar is defined)
        *##if ( $tocSidebar && !$hasSidebar )#*
            *##tocSidebar ()#*
        *##end##
    </div>
#*  *##end##
#end##
#*
 *
 * Outputs subsections as thumbnail grid. Also rearranges the images to come on top.
 *
 *##macro ( thumbs $colCount $subsections )##
    <div class="row thumbnail-row">
        <div class="col-md-12">
#*          *##set ( $colCount = $convert.toNumber($colCount) )##
            <ul class="list-unstyled">
#*          *##set ( $colSpan = 12 / $colCount )#*
            *##foreach ( $subsection in $subsections )##
                <li class="col-md-$colSpan">
                    <div class="thumbnail">
                    #* bring the first image (possibly with a link) to the top of the subsection
                    ## (to have a thumbnail with leading image)
                    *##set ( $thumbnailContent = $htmlTool.reorderToTop( $subsection, "a:has(img), img", 1, '<div class="caption"></div>' ) )#*
                    *##if ( $thumbnailContent == $subsection )#*
                        ## no image found, so at least wrap into a caption *#
                        <div class="caption">#stripEmptyP ( $thumbnailContent )</div>
#*                  *##else#*
                        *##stripEmptyP ( $thumbnailContent )#*
                    *##end##
                    </div>
                </li>
#*          *##end##
            </ul>
        </div>
    </div>
#end##
##
#**
 * Outputs subsections into a column grid
 *
 *##macro ( columns $colCount $subsections )#*
    *##set ( $colCount = $convert.toNumber($colCount) )##
    <div class="row">
#*
    *##set ( $colSpan = 12 / $colCount )#*
    *##set ( $i = 1 )#*
    *##foreach ( $subsection in $subsections )##
        <div class="col-md-$colSpan">
            $subsection
        </div>
#*
        *##set ( $mod = $i % $colCount )#*
        *##if ( $mod == 0 )#*
            ##new row *#
    </div>
    <div class="row">
#*
        *##end#*
        *##set ( $i = $i + 1 )#*
    *##end##
    </div>
#end##
##
#**
 * Outputs subsections into a sidebar one after another
 *
 *##macro ( sidebar $subsections )#*
    *##foreach ( $subsection in $subsections )#*
        *#$subsection#*
    *##end##
#end##
##
#**
 * Outputs subsections into a carousel. Also rearranges the layout to fit carousel.
 *
 *##macro ( carousel $subsections )#*

    *##if ( !$carouselCounter )#*
        *##set ( $carouselCounter = 0 )#*
    *##else#*
        *##set ( $carouselCounter = $carouselCounter + 1 )#*
    *##end#*

    *##set ( $carouselId = "carousel$carouselCounter" )##
    <div id="$carouselId" class="carousel slide" data-ride="carousel">
        <div class="carousel-inner">
#*
    *##set ( $activeClass = 'active' )#*
    *##foreach ( $subsection in $subsections )##
            <div class="item $activeClass">
#*
        ## Extract image (or link with image) from the subsection
        *##set ( $extract = $htmlTool.extract( $subsection, "a:has(img), img", 1 ) )#*
        *##if ( $extract.extracted && $extract.extracted.size() > 0 )#*
            ## take just the first extracted image element
            *#$extract.extracted.get(0)#*
        *##end#*
        ## the remainder becomes the caption (heading with text) *#
                <div class="carousel-caption">
                    #stripEmptyP ( $extract.remainder )
                </div> <!-- .carousel-caption -->
            </div> <!-- .item -->
#*
    *##set ( $activeClass = '' )#*
    *##end##
        </div> <!-- .carousel-inner -->
        <!-- Controls -->
        <a class="left carousel-control" href="#$carouselId" role="button" data-slide="prev">
            <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="right carousel-control" href="#$carouselId" role="button" data-slide="next">
            <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>
#end##
##
#**
 * Outputs a sidebar containing ToC only.
 * Does not do anything if ToC sidebar has already been added.
 *
 *##macro ( tocSidebar )#*
    *##if ( !$tocSidebarAdded )##
        <div class="col-md-4">
#*
    *##tocSidebarContent ()#*
*#
        </div>
#*
    *##end##
#end##
##
#**
 * Outputs ToC sidebar contents.
 * Does not do anything if ToC sidebar has already been added.
 *
 *##macro ( tocSidebarContent )#*
    *##if ( !$tocSidebarAdded )##
            <div id="toc-sidebar">
#*
    do not set as scroll target - works weird with grid section headers *#
                <div id="toc-scroll-target">
                <div class="well">
#*
    *##listToc ( $tocItems )#*
*#
                </div>
            </div>
#*
    *##set ( $tocSidebarAdded = true )#*
    *##end##
#end##
##
#**
 * Renders copyright year (inception-currentDate) and organization.
 *
 *##macro ( copyright )#*

    *##if ( $project )#*
        *##set ( $currentYear = ${currentDate.year} + 1900 )#*

        *##if ( ${project.inceptionYear} && ( ${project.inceptionYear} != ${currentYear.toString()} ) )#*
            *#${project.inceptionYear}-${currentYear}#*
        *##else#*
            *#${currentYear}#*
        *##end#*

        *##if ( ${project.organization} && ${project.organization.name} )#*
            *##if ( ${project.organization.url} )##
                 <a href="$project.organization.url">${project.organization.name}</a>
#*
            *##else#*
                *#${project.organization.name}#*
            *##end#*
        *##end#*
    *##end##
#end##
##
#**
 * Recursively checks if any of the submenu items is the current one
 *
 *##macro ( displayTree $item )#*

    *##if ( $item && $item.items && $item.items.size() > 0 )#*
        *##foreach ( $subitem in $item.items )#*
            *##activeLink ( $subitem.href )#*
            *##if ( $activeLink )#*
                *##set ( $displayTree = true )#*
            *##end#*
            *##displayTree ( $subitem )#*
        *##end#*
    *##end##
#end##
##
#**
 * Recursively outputs menu item and its children
 *
 *##macro ( menuItem $item )#*
    *##set ( $collapseClass = false )#*
    *##activeLink ( $item.href )#*
    ## store value (if active) for later
    *##set ( $active = $activeLink )#*
    *##if ( $active )#*
        *##set ( $currentLink = "#" )#*
    *##else#*
        *##set ( $currentLink = $relativeLink )#*
    *##end#*

    *##if ( $item.items && $item.items.size() > 0 )#*

        *##if ( $item.collapse == false )#*

            *##set ( $collapseClass = "glyphicon glyphicon-chevron-down" )#*
        *##else#*
                ## By default collapsed
            *##set ( $collapseClass = "glyphicon glyphicon-chevron-right" )#*
        *##end#*
        ## check if one of the subtree items is the current one, if so, autoexpand
        *##set ( $displayTree = false )#displayTree ( $item )#*
        *##if ( $active || $displayTree )#*
            *##set ( $collapseClass = "glyphicon glyphicon-chevron-down" )#*
        *##end#*

    *##end##
                    <li #classAttr( $activeClass )>#*
    *##fullLink ( $currentLink $item.name $item.target $item.img $item.position $item.alt $item.border $item.width $item.height $collapseClass)#*
    *##if ( $item.items && $item.items.size() > 0 && $collapseClass == "glyphicon glyphicon-chevron-down" )##
        <ul class="nav nav-list">
#*
    *##foreach ( $subitem in $item.items )#*
        *##menuItem ( $subitem )#*
    *##end##
        </ul>
#*
    *##end#*
    *#</li>
#end##
##
#**
 * Creates a list menu with submenus
 *##macro ( listMenu $menus )#*
*#
                <ul class="nav nav-list">
#*
    *##foreach ( $menu in $menus )#*
        *##if ( $menu.name )##
                    <li class="nav-header">#*
            *##if ( $menu.img )#*
                *##if ( !$menu.position || $menu.position == "left" )#*
                    *##image ($menu.img $menu.alt $menu.border $menu.width $menu.height) $menu.name#*
                *##else#*
                    *#$menu.name #image ($menu.img $menu.alt $menu.border $menu.width $menu.height)#*
                *##end#*
            *##else#*
                *#$menu.name#*
            *##end#*
                    *#</li>
#*      *##end#*

        *##if ( $menu.items && $menu.items.size() > 0 )#*
            *##foreach ( $item in $menu.items )#*
                *##menuItem ( $item )#*
            *##end#*

        *##end#*

    *##end##
                </ul>
#end##
#**
 * Filters menus by their ref or name, and returns the matching results.
 * The regex is used to check the match
 *
 *##macro ( filterMenus $menus $filterRegex )#*

    *##set ( $filterMenus = [] )#*
    *##foreach ($menu in $menus)#*
        *##if ( ( $menu.ref && $menu.ref.matches($filterRegex) ) || ( $menu.name && $menu.name.matches($filterRegex) ) )#*
            *##call ( $filterMenus.add( $menu ) )#*
        *##end#*
    *##end##
#end##
##
#**
 * Outputs bottom navigation columns. The menus can be split into columns to be
 * placed in the bottom navigation. This is done with the `bottomNav` config option:
 *
 *  <bottomNav maxSpan="8"> - maximum span is indicated in the attribute (default =9)
 *      <column>regex</column> - indicates to add a column with the indicated regex filter
 *      <column>regex</column> - ...
 *      <column>regex</column> - ...
 *  </bottomNav>
 *
 * (The above produces a 3-column navigation with `span2` for each column (because max is 8)).
 *
 *##macro ( bottomNav )#*
    ## by default, max span for bottom navigation is 9
    *##set ( $maxNavSpan = 9 )#*
    *##if ( $config.bottomNav && $config.bottomNav.getChildCount() > 0 )#*
        ## Bottom navigation config is available - filter menus for each column and collect
        *##set ( $menuColumns = [] )#*
        *##foreach ( $bottomNavCol in $config.bottomNav.getChildren() )#*
            *##filterMenus ( $decoration.body.menus, $bottomNavCol.getValue() )#*
            *##call ( $menuColumns.add( $filterMenus ) )#*
        *##end#*
        ## read max span for bottom navigation from the config
        *##if ( $config.bottomNav.getAttribute("maxSpan") )#*
            *##set ( $maxNavSpanStr = $config.bottomNav.getAttribute("maxSpan") )#*
            *##set ( $maxNavSpan = $convert.toNumber($maxNavSpanStr) )#*
        *##end#*
    *##else#*
        ## No bottom navigation config - just use all menus in a single column
        *##set ( $menuColumns = [ $decoration.body.menus ] )#*
    *##end#*

    *##if ( $maxNavSpan > 12 )#*
        *##set ( $maxNavSpan = 12 )#*
    *##end#*
    ## Determine the column widths (aim for max span of 9 (default), and max width of 4)
    *##set ( $navSpan = $maxNavSpan / $menuColumns.size() )#*
    *##if ( $navSpan > 4 )#*
        *##set ( $navSpan = 4 )#*
    *##end#*
    *##if ( $navSpan <= 0 )#*
        *##set ( $navSpan = 1 )#*
    *##end#*

    *##if ( $maxNavSpan <= 0 )#*
        *##set ( $maxNavSpan = $navSpan * $menuColumns.size() )#*
    *##end#*

    ## mark total span taken by the bottomNav (needed to add other components to the footer)
    *##set ( $lastNavSpan = $maxNavSpan - ($navSpan * ($menuColumns.size() - 1)) )#*
    *##set ( $totalNavSpan = $maxNavSpan )#*

    *##set ( $navColIndex = 0 )#*
    *##foreach ( $menuCol in $menuColumns )#*
        *##if ( $navColIndex == $menuColumns.size() - 1 )#*
            *##set ( $navSpan = $lastNavSpan )#*
        *##end##
            <div class="col-md-$navSpan bottom-nav">
#*
    *##listMenu ( $menuCol )#*
*#
            </div>
#*
    *##set ( $navColIndex = $navColIndex + 1 )#*
    *##end##
#end##
##
#**
 * Displays a 'Last published' date message.
 *
 *##macro ( publishDate )#*
    *##if ( $decoration.publishDate.format )#*
        *##set ( $format = $decoration.publishDate.format )#*
    *##else#*
        *##set ( $format = "yyyy-MM-dd" )#*
    *##end#*

    *#$dateFormat.applyPattern( $format )#*

    *##if ( $publishDate )#*
        *##set ( $dateValue = $dateFormat.format( $publishDate ) )#*
    *##elseif ( $config.publishDate )#*
        *##set ( $dateValue = $config.publishDate.getValue() )#*
    *##else#*
        *##set ( $dateValue = $dateFormat.format( $currentDate ) )#*
    *##end#*
    ## render with internationalization support *#
    $i18n.getString( "site-renderer", $locale, "template.lastpublished" ): $dateValue
#end##
##
#**
 * Displays a site version message.
 *
 *##macro ( version )#*
    ## render with internationalization support
    *#$i18n.getString( "site-renderer", $locale, "template.version" ): ${project.version}##
#end##
##
#**
 * Outputs XML DOM objects as html elements into the rendered document.
 * Taken from maven-fluido-skin.
 *
 *##macro ( htmlContent $items )#*
    *##foreach ( $item in $items )#*
        *##set ( $itemHtml = $item.toString().trim() )#*
        *##set ( $documentHeader = '<?xml version="1.0" encoding="UTF-8"?>' )#*
        *##if ( $item.name == "script" )#*
            *##set ( $itemHtml = $StringUtils.replace( $item.toUnescapedString(), $documentHeader, "" ) )#*
        *##else#*
            *##set ( $itemHtml = $StringUtils.replace( $item.toString(), $documentHeader, "" ) )#*
        *##end#*
        ## eval the HTML - this will allow users to specify Velocity variables
        *##evaluate ( $itemHtml )#*
    *##end##
#end##
##
#**
 * Marks the first header inside the content as page header, by wrapping it into
 * a div with `page-header` class
 *
 *##macro ( bodyWithHeader $content )#*
    *##if ( $config.not( "markPageHeader" ) )#*
        ## do not mark page header, just print the content
        *##set ( $bodyWithHeader = $content )#*
    *##else#*
        ## try marking the header
        *##set ( $bodyWithHeader = $htmlTool.wrap($content, "h1", '<div class="page-header"></div>', 1) )#*
        *##if ( $bodyWithHeader == $content )#*
            ## nothing's changed - try with h2
            *##set ( $bodyWithHeader = $htmlTool.wrap($content, "h2", '<div class="page-header"></div>', 1) )#*
        *##end#*
    *##end#*
    *#$bodyWithHeader##
#end##
##
#**
 * Strips empty paragraphs <p></p> from the content and outputs the result
 *
 *##macro ( stripEmptyP $content )#*
    ## use CSS selector for paragraphs that have no text content (only whitespace - \s),
    ## neither nested elements
    *#$htmlTool.remove($content, "p:matchesOwn(^${esc.backslash}s*$):not(*:has(*))")##
#end##
##
#**
 * Adds Google analytics tracker with the given account ID
 *
 *##macro ( googleAnalytics $accountId )#*
    *##if( $accountId && $accountId != "" )##
        <!-- Google Analytics -->
        <script type="text/javascript">

            var _gaq = _gaq || [];
            _gaq.push(['_setAccount', '$accountId']);
            _gaq.push(['_trackPageview']);

            (function() {
                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
            })();

        </script>
#*
    *##end##
#end##
##
#**
 * Fixes info collapse for Dependencies report.
 *
 * Uses Javascript toggle for "more information" in the dependency tree.
 *
 *##macro ( depsCollapse )#*
    *##set( $collapseCalls = $htmlTool.getAttr( $bodyContent, 'img[onclick^=toggleDependencyDetail]', "onclick") )#*
    *##set( $iconReplacements = {} )#*
    *##set( $collapseSelector = "" )#*
    *##foreach ( $collapseCall in $collapseCalls )#*
        *##set ( $funSplit = $collapseCall.split("'") )#*
        *##if ( $funSplit.size() >= 4 )#*
            *##set ( $divId = $funSplit.get(1) )#*
            *##set ( $imgId = $funSplit.get(3) )#*
            *##set ( $replBefore = '<button title="Information" class="btn btn-link btn-small" type="button" data-toggle="collapse" data-target="#' )#*
            *##set ( $replAfter = '"><i class="glyphicon glyphicon-info-sign"></i></button>' )#*
            *##call ( $iconReplacements.put("#$imgId", "$replBefore$divId$replAfter") )#*
            *##set ( $collapseSelector = "${collapseSelector}, #$divId" )#*
        *##end#*
    *##end#*

    *##if ( $iconReplacements.size() > 0 )#*
        *##set ( $bodyContent = $htmlTool.replaceAll( $bodyContent, $iconReplacements ) )#*
        *##set ( $bodyContent = $htmlTool.addClass( $bodyContent, $collapseSelector, "collapse" ) )#*
        *##set ( $bodyContent = $htmlTool.setAttr( $bodyContent, $collapseSelector, "style", "" ) )#*
    *##end##
#end##
